# Generated by Django Comprehensive Index Analysis on 2025-01-29

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('booking', '0019_securityevent_loginattempt_dataaccesslog_auditlog_and_more'),
    ]

    operations = [
        # === CRITICAL FOREIGN KEY INDEXES ===
        # These are foreign keys that aren't automatically indexed by existing migrations
        
        # Auth/Token Related Indexes
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_passwordresettoken_user_created_idx ON booking_passwordresettoken (user_id, created_at);",
            reverse_sql="DROP INDEX IF EXISTS booking_passwordresettoken_user_created_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_passwordresettoken_token_used_idx ON booking_passwordresettoken (token, is_used);",
            reverse_sql="DROP INDEX IF EXISTS booking_passwordresettoken_token_used_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_emailverificationtoken_token_used_idx ON booking_emailverificationtoken (token, is_used);",
            reverse_sql="DROP INDEX IF EXISTS booking_emailverificationtoken_token_used_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_apitoken_user_revoked_idx ON booking_apitoken (user_id, is_revoked, expires_at);",
            reverse_sql="DROP INDEX IF EXISTS booking_apitoken_user_revoked_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_apitoken_expires_revoked_idx ON booking_apitoken (expires_at, is_revoked);",
            reverse_sql="DROP INDEX IF EXISTS booking_apitoken_expires_revoked_idx;"
        ),

        # Booking System Indexes - Critical for Performance
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_bookingattendee_booking_user_idx ON booking_bookingattendee (booking_id, user_id);",
            reverse_sql="DROP INDEX IF EXISTS booking_bookingattendee_booking_user_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_bookinghistory_booking_timestamp_idx ON booking_bookinghistory (booking_id, timestamp);",
            reverse_sql="DROP INDEX IF EXISTS booking_bookinghistory_booking_timestamp_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_checkinoutevent_booking_type_timestamp_idx ON booking_checkinoutevent (booking_id, event_type, timestamp);",
            reverse_sql="DROP INDEX IF EXISTS booking_checkinoutevent_booking_type_timestamp_idx;"
        ),

        # Resource Access and Management Indexes
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_resourceaccess_resource_user_active_idx ON booking_resourceaccess (resource_id, user_id, is_active);",
            reverse_sql="DROP INDEX IF EXISTS booking_resourceaccess_resource_user_active_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_resourceaccess_expires_active_idx ON booking_resourceaccess (expires_at, is_active);",
            reverse_sql="DROP INDEX IF EXISTS booking_resourceaccess_expires_active_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_resourceresponsible_resource_role_active_idx ON booking_resourceresponsible (resource_id, role_type, is_active);",
            reverse_sql="DROP INDEX IF EXISTS booking_resourceresponsible_resource_role_active_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_resourceissue_resource_status_severity_idx ON booking_resourceissue (resource_id, status, severity);",
            reverse_sql="DROP INDEX IF EXISTS booking_resourceissue_resource_status_severity_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_resourceissue_assigned_status_idx ON booking_resourceissue (assigned_to_id, status);",
            reverse_sql="DROP INDEX IF EXISTS booking_resourceissue_assigned_status_idx;"
        ),

        # Notification System Indexes - Critical for Background Processing
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_notification_user_status_created_idx ON booking_notification (user_id, status, created_at);",
            reverse_sql="DROP INDEX IF EXISTS booking_notification_user_status_created_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_notification_status_retry_idx ON booking_notification (status, next_retry_at);",
            reverse_sql="DROP INDEX IF EXISTS booking_notification_status_retry_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_notification_type_status_idx ON booking_notification (notification_type, status);",
            reverse_sql="DROP INDEX IF EXISTS booking_notification_type_status_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_notification_delivery_status_idx ON booking_notification (delivery_method, status, created_at);",
            reverse_sql="DROP INDEX IF EXISTS booking_notification_delivery_status_idx;"
        ),

        # Billing System Indexes
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_billingrecord_period_resource_idx ON booking_billingrecord (billing_period_id, resource_id);",
            reverse_sql="DROP INDEX IF EXISTS booking_billingrecord_period_resource_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_billingrecord_user_period_idx ON booking_billingrecord (user_id, billing_period_id);",
            reverse_sql="DROP INDEX IF EXISTS booking_billingrecord_user_period_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_billingrecord_department_period_idx ON booking_billingrecord (department_id, billing_period_id);",
            reverse_sql="DROP INDEX IF EXISTS booking_billingrecord_department_period_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_billingrecord_status_created_idx ON booking_billingrecord (status, created_at);",
            reverse_sql="DROP INDEX IF EXISTS booking_billingrecord_status_created_idx;"
        ),

        # Maintenance System Indexes
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_maintenance_resource_status_idx ON booking_maintenance (resource_id, status);",
            reverse_sql="DROP INDEX IF EXISTS booking_maintenance_resource_status_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_maintenance_status_start_time_idx ON booking_maintenance (status, start_time);",
            reverse_sql="DROP INDEX IF EXISTS booking_maintenance_status_start_time_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_maintenance_assigned_status_idx ON booking_maintenance (assigned_to_id, status);",
            reverse_sql="DROP INDEX IF EXISTS booking_maintenance_assigned_status_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_maintenance_next_maintenance_idx ON booking_maintenance (next_maintenance_date, status);",
            reverse_sql="DROP INDEX IF EXISTS booking_maintenance_next_maintenance_idx;"
        ),

        # Access Request and Approval Indexes
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_accessrequest_resource_status_idx ON booking_accessrequest (resource_id, status);",
            reverse_sql="DROP INDEX IF EXISTS booking_accessrequest_resource_status_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_accessrequest_user_status_idx ON booking_accessrequest (user_id, status);",
            reverse_sql="DROP INDEX IF EXISTS booking_accessrequest_user_status_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_accessrequest_reviewed_status_idx ON booking_accessrequest (reviewed_by_id, status);",
            reverse_sql="DROP INDEX IF EXISTS booking_accessrequest_reviewed_status_idx;"
        ),

        # Training System Indexes
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_trainingrequest_user_status_idx ON booking_trainingrequest (user_id, status);",
            reverse_sql="DROP INDEX IF EXISTS booking_trainingrequest_user_status_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_trainingrequest_resource_status_idx ON booking_trainingrequest (resource_id, status);",
            reverse_sql="DROP INDEX IF EXISTS booking_trainingrequest_resource_status_idx;"
        ),

        # === TIMESTAMP FIELD INDEXES ===
        # Critical for date range queries and background job processing

        # General timestamp indexes for audit trails
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_userprofile_locked_until_idx ON booking_userprofile (locked_until);",
            reverse_sql="DROP INDEX IF EXISTS booking_userprofile_locked_until_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_userprofile_failed_login_idx ON booking_userprofile (last_failed_login, failed_login_attempts);",
            reverse_sql="DROP INDEX IF EXISTS booking_userprofile_failed_login_idx;"
        ),

        # Booking timestamp optimization
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_booking_actual_times_idx ON booking_booking (actual_start_time, actual_end_time);",
            reverse_sql="DROP INDEX IF EXISTS booking_booking_actual_times_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_booking_approved_at_idx ON booking_booking (approved_at, approved_by_id);",
            reverse_sql="DROP INDEX IF EXISTS booking_booking_approved_at_idx;"
        ),

        # Resource closure tracking
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_resource_closed_at_by_idx ON booking_resource (closed_at, closed_by_id);",
            reverse_sql="DROP INDEX IF EXISTS booking_resource_closed_at_by_idx;"
        ),

        # Notification timing indexes
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_notification_sent_read_idx ON booking_notification (sent_at, read_at);",
            reverse_sql="DROP INDEX IF EXISTS booking_notification_sent_read_idx;"
        ),

        # Google Calendar sync indexes (corrected table name and column)
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_googlecalendarsynclog_timestamp_idx ON booking_googlecalendarsynclog (timestamp, status);",
            reverse_sql="DROP INDEX IF EXISTS booking_googlecalendarsynclog_timestamp_idx;"
        ),

        # === STATUS AND BOOLEAN FIELD INDEXES ===
        # Critical for filtering operations

        # Resource status combinations
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_resource_billable_active_idx ON booking_resource (is_billable, is_active);",
            reverse_sql="DROP INDEX IF EXISTS booking_resource_billable_active_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_resource_requires_induction_active_idx ON booking_resource (requires_induction, is_active);",
            reverse_sql="DROP INDEX IF EXISTS booking_resource_requires_induction_active_idx;"
        ),

        # User profile status indexes
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_userprofile_inducted_email_verified_idx ON booking_userprofile (is_inducted, email_verified);",
            reverse_sql="DROP INDEX IF EXISTS booking_userprofile_inducted_email_verified_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_userprofile_account_locked_role_idx ON booking_userprofile (account_locked, role);",
            reverse_sql="DROP INDEX IF EXISTS booking_userprofile_account_locked_role_idx;"
        ),

        # Two-factor authentication indexes
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_twofactorauthentication_enabled_last_used_idx ON booking_twofactorauthentication (is_enabled, last_used_at);",
            reverse_sql="DROP INDEX IF EXISTS booking_twofactorauthentication_enabled_last_used_idx;"
        ),

        # Notification preferences
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_notificationpreference_user_enabled_idx ON booking_notificationpreference (user_id, is_enabled);",
            reverse_sql="DROP INDEX IF EXISTS booking_notificationpreference_user_enabled_idx;"
        ),

        # === ADVANCED COMPOUND INDEXES FOR CRITICAL QUERIES ===
        # These target specific high-frequency query patterns

        # Booking conflict detection (most critical performance improvement)
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_booking_conflict_detection_idx ON booking_booking (resource_id, start_time, end_time, status);",
            reverse_sql="DROP INDEX IF EXISTS booking_booking_conflict_detection_idx;"
        ),

        # User booking dashboard queries
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_booking_user_dashboard_idx ON booking_booking (user_id, status, start_time DESC);",
            reverse_sql="DROP INDEX IF EXISTS booking_booking_user_dashboard_idx;"
        ),

        # Resource calendar view queries
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_booking_resource_calendar_idx ON booking_booking (resource_id, start_time, status, user_id);",
            reverse_sql="DROP INDEX IF EXISTS booking_booking_resource_calendar_idx;"
        ),

        # Admin dashboard queries
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_booking_admin_status_overview_idx ON booking_booking (status, created_at DESC, resource_id);",
            reverse_sql="DROP INDEX IF EXISTS booking_booking_admin_status_overview_idx;"
        ),

        # Maintenance scheduling optimization
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_maintenance_scheduling_idx ON booking_maintenance (resource_id, start_time, end_time, status);",
            reverse_sql="DROP INDEX IF EXISTS booking_maintenance_scheduling_idx;"
        ),

        # Security audit queries
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_securityevent_analysis_idx ON booking_securityevent (event_type, timestamp DESC, user_id);",
            reverse_sql="DROP INDEX IF EXISTS booking_securityevent_analysis_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_loginattempt_security_idx ON booking_loginattempt (timestamp DESC, attempt_type, ip_address);",
            reverse_sql="DROP INDEX IF EXISTS booking_loginattempt_security_idx;"
        ),

        # Data access logging for GDPR/audit compliance
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_dataaccesslog_user_timestamp_idx ON booking_dataaccesslog (user_id, timestamp DESC, access_type);",
            reverse_sql="DROP INDEX IF EXISTS booking_dataaccesslog_user_timestamp_idx;"
        ),

        # Background task processing optimization
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_notification_retry_processing_idx ON booking_notification (status, next_retry_at, retry_count);",
            reverse_sql="DROP INDEX IF EXISTS booking_notification_retry_processing_idx;"
        ),

        # Billing report generation
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_billingrecord_reporting_idx ON booking_billingrecord (billing_period_id, status, total_charge);",
            reverse_sql="DROP INDEX IF EXISTS booking_billingrecord_reporting_idx;"
        ),

        # Resource utilization analytics
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_booking_utilization_idx ON booking_booking (resource_id, actual_start_time, actual_end_time, status);",
            reverse_sql="DROP INDEX IF EXISTS booking_booking_utilization_idx;"
        ),

        # === PARTIAL INDEXES FOR POSTGRESQL (Database-specific optimization) ===
        # Note: These will be ignored on databases that don't support partial indexes (like MySQL)

        # Active bookings only (most common query pattern)
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_booking_active_only_idx ON booking_booking (resource_id, start_time) WHERE status IN ('approved', 'pending');",
            reverse_sql="DROP INDEX IF EXISTS booking_booking_active_only_idx;"
        ),

        # Unread notifications only
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_notification_unread_only_idx ON booking_notification (user_id, created_at DESC) WHERE status != 'read';",
            reverse_sql="DROP INDEX IF EXISTS booking_notification_unread_only_idx;"
        ),

        # Open issues only
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_resourceissue_open_only_idx ON booking_resourceissue (resource_id, severity, created_at DESC) WHERE status IN ('open', 'in_progress');",
            reverse_sql="DROP INDEX IF EXISTS booking_resourceissue_open_only_idx;"
        ),

        # Active maintenance only
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_maintenance_active_only_idx ON booking_maintenance (resource_id, start_time, end_time) WHERE status IN ('scheduled', 'in_progress');",
            reverse_sql="DROP INDEX IF EXISTS booking_maintenance_active_only_idx;"
        ),

        # Non-expired tokens only
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS booking_apitoken_active_only_idx ON booking_apitoken (user_id, expires_at) WHERE is_revoked = FALSE;",
            reverse_sql="DROP INDEX IF EXISTS booking_apitoken_active_only_idx;"
        ),
    ]